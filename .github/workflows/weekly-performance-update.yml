name: Weekly Performance Update - Multi-Format Scoring

on:
schedule:
- cron: ‘0 14 * * 3’  # Wednesday 2 PM UTC
workflow_dispatch:
inputs:
week:
description: ‘Week number to update’
required: true
type: string
force_update:
description: ‘Force update existing data’
required: false
type: boolean
default: false

jobs:
update-performance:
runs-on: ubuntu-latest

```
steps:
- name: Checkout repository
  uses: actions/checkout@v4
  with:
    fetch-depth: 0

- name: Set up Python
  uses: actions/setup-python@v4
  with:
    python-version: '3.11'

- name: Install dependencies
  run: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt

- name: Create data directories
  run: |
    mkdir -p data/weekly_snapshots data/player_histories

- name: Calculate current week
  id: week
  run: |
    if [ -n "${{ github.event.inputs.week }}" ]; then
      WEEK=${{ github.event.inputs.week }}
    else
      CURRENT_DATE=$(date +%s)
      SEASON_START=$(date -d "2025-09-04" +%s)
      
      if [ $CURRENT_DATE -lt $SEASON_START ]; then
        WEEK=1
      else
        DAYS_SINCE_START=$(( ($CURRENT_DATE - $SEASON_START) / 86400 ))
        WEEK=$(( ($DAYS_SINCE_START / 7) + 1 ))
        if [ $WEEK -gt 18 ]; then
          WEEK=18
        fi
      fi
    fi
    
    echo "week=$WEEK" >> $GITHUB_OUTPUT
    echo "Processing Week $WEEK"

- name: Run production data collection
  id: collect
  run: |
    echo "Running production NFL data collection script..."
    python scripts/collect_nfl_data.py
    
    if [ $? -eq 0 ]; then
      echo "collection_success=true" >> $GITHUB_OUTPUT
      echo "Base data collection completed successfully"
    else
      echo "collection_success=false" >> $GITHUB_OUTPUT
      echo "Base data collection failed"
      exit 1
    fi

- name: Create multi-format scoring analysis
  id: scoring
  run: |
    WEEK=${{ steps.week.outputs.week }}
    FORCE_UPDATE=${{ github.event.inputs.force_update }}
    
    # Create scoring analysis script that works with production data
    cat > create_scoring_analysis.py << 'EOF'
    #!/usr/bin/env python3
    import json
    import os
    import sys
    from datetime import datetime, timezone
    from typing import Dict, List, Any
    
    def calculate_multi_format_points(stats: Dict) -> Dict:
        """Calculate fantasy points for all scoring formats"""
        scoring = {
            'passing_yards': 0.04,      # 1 pt per 25 yards
            'passing_tds': 4,           # 4 pts per TD
            'interceptions': -2,        # -2 pts per INT
            'rushing_yards': 0.1,       # 1 pt per 10 yards
            'rushing_tds': 6,           # 6 pts per TD
            'receiving_yards': 0.1,     # 1 pt per 10 yards
            'receiving_tds': 6,         # 6 pts per TD
            'receptions_ppr': 1,        # PPR: 1 pt per reception
            'receptions_half': 0.5,     # Half PPR: 0.5 pt per reception
            'fumbles_lost': -2          # -2 pts per fumble lost
        }
        
        # Calculate base points (standard scoring)
        standard_points = (
            stats.get('passing_yards', 0) * scoring['passing_yards'] +
            stats.get('passing_tds', 0) * scoring['passing_tds'] +
            stats.get('interceptions', 0) * scoring['interceptions'] +
            stats.get('rushing_yards', 0) * scoring['rushing_yards'] +
            stats.get('rushing_tds', 0) * scoring['rushing_tds'] +
            stats.get('receiving_yards', 0) * scoring['receiving_yards'] +
            stats.get('receiving_tds', 0) * scoring['receiving_tds'] +
            stats.get('fumbles_lost', 0) * scoring['fumbles_lost']
        )
        
        # Add reception bonuses
        receptions = stats.get('receptions', 0)
        half_ppr_points = standard_points + (receptions * scoring['receptions_half'])
        ppr_points = standard_points + (receptions * scoring['receptions_ppr'])
        
        return {
            'standard': round(standard_points, 2),
            'half_ppr': round(half_ppr_points, 2),
            'ppr': round(ppr_points, 2)
        }
    
    def load_production_data():
        """Load data created by production script"""
        try:
            # Load season performances from production script
            with open('season_2025_performances.json', 'r') as f:
                season_data = json.load(f)
            
            # Load players data
            with open('data/players.json', 'r') as f:
                players_data = json.load(f)
            
            print(f"Loaded production data: {len(season_data.get('performances', []))} performances")
            return season_data, players_data
            
        except FileNotFoundError as e:
            print(f"Production data not found: {e}")
            return None, None
    
    def create_legacy_format_data(season_data, players_data, target_week, force_update):
        """Convert production data to legacy multi-format structure"""
        
        # Create legacy season performances structure
        legacy_season = {
            'metadata': {
                'season': 2025,
                'created_at': datetime.now(timezone.utc).isoformat(),
                'last_updated': datetime.now(timezone.utc).isoformat(),
                'weeks_processed': [],
                'total_players': 0
            },
            'players': {}
        }
        
        # Process each performance record
        performances = season_data.get('performances', [])
        weeks_found = set()
        
        for perf in performances:
            sleeper_id = perf.get('sleeper_id')
            week = perf.get('week')
            
            if not sleeper_id:
                continue
                
            weeks_found.add(week)
            
            # Skip if not target week and not force update
            if target_week and week != target_week and not force_update:
                continue
            
            # Extract stats
            stats = {
                'passing_yards': perf.get('passing_yards', 0),
                'passing_tds': perf.get('passing_tds', 0),
                'interceptions': perf.get('interceptions', 0),
                'rushing_yards': perf.get('rushing_yards', 0),
                'rushing_tds': perf.get('rushing_tds', 0),
                'receiving_yards': perf.get('receiving_yards', 0),
                'receiving_tds': perf.get('receiving_tds', 0),
                'receptions': perf.get('receptions', 0),
                'targets': perf.get('targets', 0),
                'carries': perf.get('carries', 0),
                'fumbles_lost': 0  # Not in production data, default to 0
            }
            
            # Calculate multi-format points
            fantasy_points = calculate_multi_format_points(stats)
            
            # Create/update player record
            if sleeper_id not in legacy_season['players']:
                legacy_season['players'][sleeper_id] = {
                    'info': {
                        'name': perf.get('player_name', ''),
                        'position': perf.get('position', ''),
                        'team': perf.get('team', ''),
                        'sleeper_id': sleeper_id
                    },
                    'weekly_performances': [],
                    'season_totals': {
                        'games_played': 0,
                        'fantasy_points': {'standard': 0, 'half_ppr': 0, 'ppr': 0}
                    }
                }
            
            player_record = legacy_season['players'][sleeper_id]
            
            # Add weekly performance
            weekly_perf = {
                'week': week,
                'opponent': perf.get('team', ''),  # Opponent not in production data
                'stats': stats,
                'fantasy_points': fantasy_points
            }
            
            # Remove existing week if force update
            if force_update:
                player_record['weekly_performances'] = [
                    p for p in player_record['weekly_performances'] 
                    if p.get('week') != week
                ]
            
            # Add new performance
            player_record['weekly_performances'].append(weekly_perf)
            player_record['weekly_performances'].sort(key=lambda x: x['week'])
            
            # Recalculate season totals
            games_played = len(player_record['weekly_performances'])
            totals = {'standard': 0, 'half_ppr': 0, 'ppr': 0}
            
            for wp in player_record['weekly_performances']:
                for format_name in totals.keys():
                    totals[format_name] += wp['fantasy_points'].get(format_name, 0)
            
            player_record['season_totals'] = {
                'games_played': games_played,
                'fantasy_points': {
                    format_name: round(total, 2) 
                    for format_name, total in totals.items()
                },
                'averages': {
                    format_name: round(total / games_played if games_played > 0 else 0, 2)
                    for format_name, total in totals.items()
                }
            }
        
        # Update metadata
        legacy_season['metadata'].update({
            'weeks_processed': sorted(list(weeks_found)),
            'total_players': len(legacy_season['players'])
        })
        
        return legacy_season
    
    def create_weekly_snapshots_file(season_data, target_week):
        """Create consolidated weekly snapshots file"""
        snapshots_data = {
            'metadata': {
                'season': 2025,
                'created_at': datetime.now(timezone.utc).isoformat(),
                'scoring_formats': ['standard', 'half_ppr', 'ppr']
            },
            'snapshots': []
        }
        
        # Load individual snapshots created by production script
        snapshot_files = []
        if os.path.exists('weekly_snapshots'):
            for filename in os.listdir('weekly_snapshots'):
                if filename.startswith('week_') and filename.endswith('_2025.json'):
                    snapshot_files.append(filename)
        
        # Process each snapshot file
        for filename in sorted(snapshot_files):
            try:
                with open(f'weekly_snapshots/{filename}', 'r') as f:
                    snapshot = json.load(f)
                
                week = snapshot.get('week')
                performances = snapshot.get('performances', [])
                
                if not performances:
                    # Create empty snapshot
                    consolidated_snapshot = {
                        'week': week,
                        'date': datetime.now(timezone.utc).date().isoformat(),
                        'data_available': False,
                        'message': f'No performance data available for Week {week}'
                    }
                else:
                    # Create multi-format snapshot
                    player_performances = []
                    for perf in performances:
                        stats = {
                            'passing_yards': perf.get('passing_yards', 0),
                            'passing_tds': perf.get('passing_tds', 0),
                            'interceptions': perf.get('interceptions', 0),
                            'rushing_yards': perf.get('rushing_yards', 0),
                            'rushing_tds': perf.get('rushing_tds', 0),
                            'receiving_yards': perf.get('receiving_yards', 0),
                            'receiving_tds': perf.get('receiving_tds', 0),
                            'receptions': perf.get('receptions', 0)
                        }
                        
                        fantasy_points = calculate_multi_format_points(stats)
                        
                        player_performances.append({
                            'name': perf.get('player_name', ''),
                            'position': perf.get('position', ''),
                            'team': perf.get('team', ''),
                            'fantasy_points': fantasy_points
                        })
                    
                    # Create scoring leaders for each format
                    consolidated_snapshot = {
                        'week': week,
                        'date': datetime.now(timezone.utc).date().isoformat(),
                        'data_available': True,
                        'total_performances': len(player_performances),
                        'scoring_leaders': {}
                    }
                    
                    for format_name in ['standard', 'half_ppr', 'ppr']:
                        sorted_players = sorted(
                            player_performances, 
                            key=lambda x: x['fantasy_points'][format_name], 
                            reverse=True
                        )
                        
                        # Position leaders
                        position_leaders = {}
                        for position in ['QB', 'RB', 'WR', 'TE']:
                            pos_players = [p for p in sorted_players if p['position'] == position]
                            if pos_players:
                                leader = pos_players[0]
                                position_leaders[position] = {
                                    'name': leader['name'],
                                    'team': leader['team'],
                                    'points': leader['fantasy_points'][format_name]
                                }
                        
                        # Format statistics
                        format_points = [p['fantasy_points'][format_name] for p in player_performances]
                        
                        consolidated_snapshot['scoring_leaders'][format_name] = {
                            'position_leaders': position_leaders,
                            'overall_leader': {
                                'name': sorted_players[0]['name'],
                                'position': sorted_players[0]['position'], 
                                'team': sorted_players[0]['team'],
                                'points': sorted_players[0]['fantasy_points'][format_name]
                            } if sorted_players else {},
                            'average_points': round(sum(format_points) / len(format_points), 2) if format_points else 0,
                            'boom_games_20_plus': len([p for p in format_points if p >= 20])
                        }
                
                snapshots_data['snapshots'].append(consolidated_snapshot)
                
            except Exception as e:
                print(f"Error processing {filename}: {e}")
                continue
        
        return snapshots_data
    
    def main():
        target_week = int(sys.argv[1]) if len(sys.argv) > 1 else None
        force_update = sys.argv[2].lower() == 'true' if len(sys.argv) > 2 else False
        
        print(f"Creating multi-format scoring analysis for Week {target_week}")
        
        # Load production data
        season_data, players_data = load_production_data()
        if not season_data or not players_data:
            print("Failed to load production data")
            return False
        
        # Create legacy format data
        legacy_season = create_legacy_format_data(season_data, players_data, target_week, force_update)
        
        # Create consolidated weekly snapshots
        snapshots_data = create_weekly_snapshots_file(season_data, target_week)
        
        # Save files
        with open('data/season_2025_performances.json', 'w') as f:
            json.dump(legacy_season, f, indent=2)
        
        with open('data/weekly_snapshots.json', 'w') as f:
            json.dump(snapshots_data, f, indent=2)
        
        print(f"Multi-format analysis complete: {len(legacy_season['players'])} players")
        return True
    
    if __name__ == "__main__":
        success = main()
        sys.exit(0 if success else 1)
    EOF
    
    # Run the scoring analysis
    python create_scoring_analysis.py $WEEK $FORCE_UPDATE
    
    if [ $? -eq 0 ]; then
      echo "scoring_success=true" >> $GITHUB_OUTPUT
      
      # Get statistics
      if [ -f "data/season_2025_performances.json" ]; then
        TOTAL_PLAYERS=$(python -c "import json; data=json.load(open('data/season_2025_performances.json')); print(len(data['players']))")
        echo "total_players=$TOTAL_PLAYERS" >> $GITHUB_OUTPUT
      fi
      
      if [ -f "data/weekly_snapshots.json" ]; then
        SNAPSHOTS_COUNT=$(python -c "import json; data=json.load(open('data/weekly_snapshots.json')); print(len(data['snapshots']))")
        echo "snapshots_count=$SNAPSHOTS_COUNT" >> $GITHUB_OUTPUT
      fi
    else
      echo "scoring_success=false" >> $GITHUB_OUTPUT
    fi

- name: Validate data integrity
  if: steps.collect.outputs.collection_success == 'true' && steps.scoring.outputs.scoring_success == 'true'
  run: |
    python -c "
    import json
    import sys
    
    # Validate season performances
    try:
        with open('data/season_2025_performances.json', 'r') as f:
            season_data = json.load(f)
        
        # Check structure
        assert 'metadata' in season_data
        assert 'players' in season_data
        
        # Check multi-format scoring exists
        for player_id, player_data in season_data['players'].items():
            if player_data['weekly_performances']:
                perf = player_data['weekly_performances'][0]
                assert 'fantasy_points' in perf
                assert 'standard' in perf['fantasy_points']
                assert 'half_ppr' in perf['fantasy_points']
                assert 'ppr' in perf['fantasy_points']
                break
        
        print('Season performance data validated')
        
    except Exception as e:
        print(f'Season data validation failed: {e}')
        sys.exit(1)
    
    # Validate snapshots
    try:
        with open('data/weekly_snapshots.json', 'r') as f:
            snapshots = json.load(f)
        
        assert 'snapshots' in snapshots
        
        if snapshots['snapshots']:
            for snapshot in snapshots['snapshots']:
                if snapshot.get('data_available'):
                    assert 'scoring_leaders' in snapshot
                    for format_name in ['standard', 'half_ppr', 'ppr']:
                        assert format_name in snapshot['scoring_leaders']
        
        print('Snapshots data validated')
        
    except Exception as e:
        print(f'Snapshots validation failed: {e}')
        sys.exit(1)
    "

- name: Commit updated data
  if: steps.collect.outputs.collection_success == 'true' && steps.scoring.outputs.scoring_success == 'true'
  run: |
    git config --local user.email "action@github.com"
    git config --local user.name "GitHub Action"
    
    git add data/ season_2025_performances.json weekly_snapshots/
    
    if git diff --staged --quiet; then
      echo "No changes to commit"
    else
      WEEK=${{ steps.week.outputs.week }}
      PLAYERS=${{ steps.scoring.outputs.total_players }}
      SNAPSHOTS=${{ steps.scoring.outputs.snapshots_count }}
      
      git commit -m "Week $WEEK multi-format performance update - $PLAYERS players, $SNAPSHOTS weeks tracked"
      git push
    fi

- name: Create summary
  if: always()
  run: |
    WEEK=${{ steps.week.outputs.week }}
    echo "## Week $WEEK Multi-Format Performance Update" >> $GITHUB_STEP_SUMMARY
    
    if [ "${{ steps.collect.outputs.collection_success }}" == "true" ] && [ "${{ steps.scoring.outputs.scoring_success }}" == "true" ]; then
      echo "✅ **Status**: Success" >> $GITHUB_STEP_SUMMARY
      echo "📊 **Players Tracked**: ${{ steps.scoring.outputs.total_players }}" >> $GITHUB_STEP_SUMMARY
      echo "📈 **Total Weeks**: ${{ steps.scoring.outputs.snapshots_count }}" >> $GITHUB_STEP_SUMMARY
      
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "### Scoring Formats Updated:" >> $GITHUB_STEP_SUMMARY
      echo "- **Standard**: Traditional scoring (no PPR bonus)" >> $GITHUB_STEP_SUMMARY
      echo "- **Half PPR**: 0.5 points per reception" >> $GITHUB_STEP_SUMMARY
      echo "- **PPR**: 1.0 points per reception" >> $GITHUB_STEP_SUMMARY
      
      echo "" >> $GITHUB_STEP_SUMMARY
      echo "### Files Updated:" >> $GITHUB_STEP_SUMMARY
      echo "- \`data/season_2025_performances.json\` - Player performance timelines" >> $GITHUB_STEP_SUMMARY
      echo "- \`data/weekly_snapshots.json\` - Weekly league snapshots" >> $GITHUB_STEP_SUMMARY
      echo "- \`season_2025_performances.json\` - Production data file" >> $GITHUB_STEP_SUMMARY
      echo "- \`weekly_snapshots/\` - Individual week files" >> $GITHUB_STEP_SUMMARY
      
    else
      echo "❌ **Status**: Failed" >> $GITHUB_STEP_SUMMARY
      echo "Check workflow logs for error details" >> $GITHUB_STEP_SUMMARY
    fi
```